//TypeScript 中泛型设计的目的是使在成员之间提供有意义的约束，为代码增加抽象层和提升可重用性。
//泛型可以应用于 Typescript 中的函数（函数参数、函数返回值）、接口和类（类的实例成员、类的方法）。

//先来看这个如果平常我们写函数的参数和返回值类型可能会这么写~约束了函数参数和返回值必须为数字类型
function identity(arg: number): number {
    return arg;
}

//那么问题来了。如果我要参数和返回值类型限定为字符串类型的话，又改成这么写:
function identity01(arg: string): string {
    return arg;
}

//当函数想支持多类型参数或返回值的时候，上述写法将变得十分不灵活。于是泛型就闪亮登场了！
function identity02<T>(arg: T): T {
    return arg;
}
function identities<T, U>(arg1: T, arg2: U): [T, U] {
    return [arg1, arg2];
}
//使用泛型后，可以接受任意类型，但是又完成了函数参数和返回值的约束关系。十分灵活~可复用性大大增强了
//当使用泛型时，一般情况下常用 T、U、V 表示，如果比较复杂，应使用更优语义化的描述

//当函数、接口、类是接受多类型参数的时候，可以用泛型提高可重用性
//当函数、接口、类需要在多个地方用到某个类型的时候。